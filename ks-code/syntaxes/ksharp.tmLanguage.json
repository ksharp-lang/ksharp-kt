{
  "name": "ksharp",
  "scopeName": "source.ksharp",
  "fileTypes": ["ks"],
  "patterns": [
    { "include": "#keyword" },
    { "include": "#type" },
    { "include": "#function" },
    { "include": "#typeInstance" },
    { "include": "#string" },
    { "include": "#constant" },
    { "include": "#operator" },
    { "include": "#hexNumber" },
    { "include": "#octalNumber" },
    { "include": "#binaryNumber" },
    { "include": "#decimal" },
    { "include": "#cientificInteger" },
    { "include": "#integer" }
  ],
  "repository": {
    "hexNumber": {
      "match": "\\b(?i:(0x[\\h_]+))",
      "name": "constant.numeric.integer.hexadecimal.python"
    },
    "octalNumber": {
      "match": "\\b(?i:(0o?[0-7_]+))",
      "name": "constant.numeric.integer.octal.python"
    },
    "binaryNumber": {
      "match": "\\b(?i:(0b[01_]+))",
      "name": "constant.numeric.integer.binary.python"
    },
    "decimal": {
      "match": "(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))",
      "name": "constant.numeric.float.python"
    },
    "cientificInteger": {
      "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))",
      "name": "constant.numeric.float.python"
    },
    "integer": {
      "match": "\\b([0-9][0-9_]*|0)",
      "name": "constant.numeric.integer.decimal.python"
    },
    "constant": {
      "match": "True|False|Unit",
      "name": "constant.language.ksharp"
    },
    "keyword": {
      "match": "if|let|else|then",
      "name": "keyword.control.ksharp"
    },
    "modifier": {
      "match": "internal",
      "name": "storage.modifier.ksharp"
    },
    "operator": {
      "match": "\\+|\\-|\\*|\\/|\\%|\\>|\\<|\\=|\\!|\\&|\\$|\\#|\\^|\\?|\\.\\\\|\\||\\:",
      "name": "keyword.operator.ksharp"
    },
    "string": {
      "patterns": [
        {
          "begin": "\"\"\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ksharp"
            }
          },
          "comment": "double quoted string",
          "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ksharp"
            },
            "2": {
              "name": "meta.empty-string.double.ksharp"
            }
          },
          "name": "string.quoted.double.block.ksharp"
        },
        {
          "begin": "(\")",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.ksharp"
            }
          },
          "comment": "double quoted string",
          "end": "((?<=\")(\")|\")|(\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ksharp"
            },
            "2": {
              "name": "meta.empty-string.double.ksharp"
            },
            "3": {
              "name": "invalid.illegal.unclosed-string.ksharp"
            }
          },
          "name": "string.quoted.double.single-line.ksharp"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "begin": "^(internal)\\s+(type)\\s+([A-Z][a-zA-Z_0-9]*)",
          "beginCaptures": {
            "1": { "name": "storage.modifier.ksharp" },
            "2": { "name": "storage.type.function.ksharp" },
            "3": { "name": "entity.name.function.ksharp" }
          },
          "end": "\\=",
          "endCaptures": {
            "0": { "name": "keyword.operator.assignment.ksharp" }
          },
          "patterns": [{ "include": "#parameters" }]
        },
        {
          "begin": "^(type)\\s+([A-Z][a-zA-Z_0-9]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.function.ksharp" },
            "2": { "name": "entity.name.function.ksharp" }
          },
          "end": "\\=",
          "endCaptures": {
            "0": { "name": "keyword.operator.assignment.ksharp" }
          },
          "patterns": [{ "include": "#parameters" }]
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "patterns": [
            {
              "match": "^(native)\\s+(pub)\\s+([a-z][a-zA-Z_0-9]*)",
              "captures": {
                "1": { "name": "storage.modifier.ksharp" },
                "2": { "name": "storage.modifier.ksharp" },
                "3": { "name": "entity.name.function.ksharp" }
              }
            },
            { "include": "#parameters" }
          ]
        },
        {
          "begin": "^(pub)\\s+([a-z][a-zA-Z_0-9]*)",
          "beginCaptures": {
            "1": { "name": "storage.modifier.ksharp" },
            "2": { "name": "entity.name.function.ksharp" }
          },
          "end": "\\=",
          "endCaptures": {
            "0": { "name": "keyword.operator.assignment.ksharp" }
          },
          "patterns": [{ "include": "#parameters" }]
        },
        {
          "begin": "^(native)\\s+([a-z][a-zA-Z_0-9]*)",
          "beginCaptures": {
            "1": { "name": "storage.modifier.ksharp" },
            "2": { "name": "entity.name.function.ksharp" }
          },
          "end": "\\=",
          "endCaptures": {
            "0": { "name": "keyword.operator.assignment.ksharp" }
          },
          "patterns": [{ "include": "#parameters" }]
        },
        {
          "begin": "^(\\s*)",
          "beginCaptures": {
            "0": { "name": "whitespace.ksharp" }
          },
          "end": "\\=",
          "endCaptures": {
            "0": { "name": "keyword.operator.assignment.ksharp" }
          },
          "patterns": [
            { "include": "#functionName" },
            { "include": "#parameters" }
          ]
        }
      ]
    },
    "parameters": {
      "match": "[a-z][A-Za-z0-9_]*",
      "name": "variable.parameter.ksharp"
    },
    "typeInstance": {
      "match": "[A-Z][A-Za-z0-9_]*",
      "name": "support.type.primitive.ksharp"
    },
    "functionName": {
      "patterns": [
        {
          "match": "[a-z][a-zA-Z_0-9]*",
          "name": "entity.name.function.ksharp",
          "patterns": [{ "include": "#parameters" }]
        },
        {
          "begin": "\\([\\+\\-\\*\\/\\%\\>\\<\\=\\!\\&\\$\\#\\^\\?\\.\\\\\\|\\:]+\\)",
          "patterns": [{ "include": "#parameters" }],
          "name": "entity.name.function.ksharp"
        }
      ]
    }
  }
}
